import { generateArgumentName } from "./util.js";
/** Generate a Typescript definition file for the query */
export function generateDts(schema) {
    let outputType = generateOutputType(schema);
    let params = generateParameters(schema);
    return `// Auto-generated by vite-plugin-sqlite
${outputType}
export default async function(${params}): Promise<${outputType ? "OutputType[]" : "void"}>;
`;
}
const PROPERTY_REGEX = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
function generateOutputType(schema) {
    if (schema.outputFields.length === 0) {
        return "";
    }
    const fields = schema.outputFields
        .map((field) => `  ${PROPERTY_REGEX.test(field.name) ? field.name : JSON.stringify(field.name)}: ${field.type}${field.nullable ? ` | null` : ``};\n`)
        .join("");
    return `export type OutputType = {\n${fields}}`;
}
function generateParameters(schema) {
    if (schema.inputFields.length === 0) {
        return "";
    }
    const fields = schema.inputFields
        .map((field) => `${generateArgumentName(field)}${field.nullable ? `?` : ``}: ${field.type}${field.nullable ? ` | null` : ``}`)
        .join(", ");
    return fields;
}
