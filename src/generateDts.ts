import { QuerySchema } from "./sqlSchema.js";
import { generateArgumentName } from "./util.js";

/** Generate a Typescript definition file for the query */
export function generateDts(schema: QuerySchema): string {
  let outputType = generateOutputType(schema);
  let params = generateParameters(schema);
  return `// Auto-generated by vite-plugin-sqlite
${outputType}
export default async function(${params}): Promise<${
    outputType ? "OutputType[]" : "void"
  }>;
`;
}

function generateOutputType(schema: QuerySchema): string {
  if (schema.outputFields.length === 0) {
    return "";
  }
  const fields = schema.outputFields
    .map(
      (field) =>
        `  ${field.name}: ${field.type}${field.nullable ? ` | null` : ``};\n`
    )
    .join("");

  return `export type OutputType = {\n${fields}}`;
}

function generateParameters(schema: QuerySchema): string {
  if (schema.inputFields.length === 0) {
    return "";
  }
  const fields = schema.inputFields
    .map(
      (field) =>
        `${generateArgumentName(field)}${field.nullable ? `?` : ``}: ${
          field.type
        }${field.nullable ? ` | null` : ``}`
    )
    .join(", ");

  return fields;
}
