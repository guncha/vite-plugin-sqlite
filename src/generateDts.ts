import { InputField, QuerySchema } from "./sqlSchema.js";
import { generateArgumentName } from "./util.js";

/** Generate a Typescript definition file for the query */
export function generateDts(schema: QuerySchema): string {
  let outputType = generateOutputType(schema);
  let params = generateParameters(schema);
  return `// Auto-generated by vite-plugin-sqlite
${outputType}
export default async function(${params}): Promise<${
    outputType ? "OutputType[]" : "void"
  }>;
`;
}

const PROPERTY_REGEX = /^[a-zA-Z_][a-zA-Z0-9_]*$/;
function generateOutputType(schema: QuerySchema): string {
  if (schema.outputFields.length === 0) {
    return "";
  }
  const fields = schema.outputFields
    .map(
      (field) =>
        `  ${
          PROPERTY_REGEX.test(field.name)
            ? field.name
            : JSON.stringify(field.name)
        }: ${field.type}${field.nullable ? ` | null` : ``};\n`
    )
    .join("");

  return `export type OutputType = {\n${fields}}`;
}

function generateParameters(schema: QuerySchema): string {
  if (schema.inputFields.length === 0) {
    return "";
  }
  // Create a set of all parameters that have duplicate names
  const duplicateNames = new Set<string>();
  for (const field of schema.inputFields) {
    if (schema.inputFields.filter((f) => f.name === field.name).length > 1) {
      duplicateNames.add(field.name);
    }
  }

  const namedFields = schema.inputFields.filter(
    (field) => field.name.startsWith("$") || field.name.startsWith(":") || field.name.startsWith("@")
  );

  const unamedFields = schema.inputFields.filter(
    (field) => namedFields.includes(field) === false
  );

  const fields = unamedFields
    .map(
      (field) =>
        fieldNameAndType(field)
    )

  if (namedFields.length > 0) {
    fields.push(`args: {${
      namedFields.map(fieldNameAndType).join(", ")
    }}`);
  }

  return fields.join(", ");

  function fieldNameAndType(field: InputField): string {
    return `${generateArgumentName(field, duplicateNames.has(field.name))}${field.nullable ? `?` : ``}: ${field.type}${field.nullable ? ` | null` : ``}`;
  }
}
